<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ManageMapper">
	<!-- namespace 속성 : 현재 공간(영역)에 대한 이름(반드시 지정!) -->

	<resultMap type="Folder" id="folder_rm">
   		<id property="folderNo" column="FOLDER_NO"/>
   		<result property="boardTypeNo" column="BOARD_TYPE_NO"></result>
   		<result property="folderName" column="FOLDER_NAME"></result>
   		<result property="folderOrder" column="FOLDER_ORDER"></result>
   		<result property="fileCount" column="FILE_COUNT"></result>
 	 </resultMap>
 	 
 	 
	<resultMap type="CategoryOrder" id="categoryOrder_rm">
   		<id property="memberNo" column="MEMBER_NO"/>
   		<result property="diary" column="DIARY"></result>
   		<result property="album" column="ALBUM"></result>
   		<result property="video" column="VIDEO"></result>
   		<result property="guestBook" column="GUEST_BOOK"></result>
 	 </resultMap>
 	 
 	 
	<resultMap type="Friend" id="friend_rm">
   		<id property="friendNo" column="FRIEND_NO"/>
   		<result property="memberNickname" column="MEMBER_NICKNAME"></result>
   		<result property="profileImage" column="PROFILE_IMG"></result>
 	 </resultMap>
 	 
 	 
 	 
	<resultMap type="Font" id="font_rm">
   		<id property="fontNo" column="FONT_NO"/>
   		<result property="fontName" column="FONT_NAME"></result>
   		<result property="fontPath" column="FONT_PATH"></result>
   		<result property="fontCreater" column="FONT_CREATER"></result>
 	 </resultMap>
 	 
 	 
	<resultMap type="File" id="file_rm">
   		<id property="fileNo" column="FILE_NO"/>
   		<result property="fileTitle" column="FILE_TITLE"></result>
   		<result property="openFlag" column="OPEN_FL"></result>
   		<result property="folderNo" column="FOLDER_NO"></result>
   		<result property="folderName" column="FOLDER_NAME"></result>
   		<result property="categoryNo" column="CATEGORY_NO"></result>
 	 </resultMap>
 	 
 	 
	<resultMap type="Music" id="music_rm">
   		<id property="musicNo" column="MUSIC_NO"/>
   		<result property="musicName" column="MUSIC_NAME"></result>
   		<result property="musicPath" column="MUSIC_PATH"></result>
   		<result property="musicThumnail" column="MUSIC_THUMNAIL"></result>
   		<result property="musicCreater" column="MUSIC_CREATER"></result>
   		<result property="memberNo" column="MEMBER_NO"></result>
 	 </resultMap>
 	 
 	 
 	 
 	 
 <!-- 폴더 ====================================================-->

	<!-- 폴더 리스트 조회 -->
	<select id="getFolderList" resultMap="folder_rm">
		SELECT F.FOLDER_NO, BOARD_TYPE_NO, FOLDER_NAME, FOLDER_ORDER, MEMBER_NO, 
		(SELECT COUNT(*) FROM DIARY D WHERE D.MEMBER_NO = 1 AND D.FOLDER_NO = F.FOLDER_NO AND D_DEL_YN = 'N')  + 
		(SELECT COUNT(*) FROM ALBUM A WHERE A.MEMBER_NO = 1 AND A.FOLDER_NO = F.FOLDER_NO AND A_DEL_FL = 'N') + 
		(SELECT COUNT(*) FROM VIDEO V WHERE V.MEMBER_NO = 1 AND V.FOLDER_NO = F.FOLDER_NO AND V_DEL_YN = 'N')  FILE_COUNT
		FROM FOLDER  F 
		WHERE MEMBER_NO  = #{memberNo}
		AND FOLDER_DEL_YN = 'N'
		ORDER BY BOARD_TYPE_NO, FOLDER_ORDER
	</select>
 	 
 	<!-- 카테고리순서 조회 -->
	<select id="getCategoryOrder" resultMap="categoryOrder_rm">
		SELECT * FROM CATEGORY_ORDER  WHERE MEMBER_NO = #{memberNo}
	</select>


	<!-- 카테고리 순서 변경 -->
	<update id="changeCategory">
		UPDATE CATEGORY_ORDER SET
		<if test='diary != null'>
			DIARY = #{diary},
		</if>
		<if test='album != null'>
			ALBUM = #{album},
		</if>
		<if test='video != null'>
			VIDEO = #{video},
		</if>
		<if test='guestBook != null'>
			GUEST_BOOK = #{guestBook}
		</if>
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 카테고리 순서 원래대로 -->
	<update id="categorySelectCancel">
		UPDATE CATEGORY_ORDER SET
		DIARY = 1,
		ALBUM = 2,
		VIDEO = 3,
		GUEST_BOOK = 4
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 카테고리 중 보여질것 선택 -->
	<update id="categorySelect">
		UPDATE CATEGORY_ORDER SET
		<if test='diary != null'>
			DIARY = #{diary},
		</if>
		<if test='album != null'>
			ALBUM = #{album},
		</if>
		<if test='video != null'>
			VIDEO = #{video},
		</if>
		<if test='guestBook != null'>
			GUEST_BOOK = #{guestBook}
		</if>
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 카테고리에 새 폴더 삽입 -->
	<insert id="addFolder" parameterType="map" useGeneratedKeys="true">
	
		<selectKey keyProperty="folderNo" resultType="_int" order="BEFORE">
			SELECT SEQ_FOLDER_NO.NEXTVAL FROM DUAL
		</selectKey>
		
		INSERT INTO FOLDER VALUES(
		#{folderNo}, #{boardTypeNo},
		#{folderName}, #{folderOrder}, #{memberNo}, DEFAULT)
	</insert>
	
	<!-- 카테고리에서 폴더 삭제 -->
	<update id="deleteFolder">
		UPDATE FOLDER SET
		FOLDER_DEL_YN = 'Y'
		WHERE MEMBER_NO = #{memberNo}
		AND FOLDER_NO = #{folderNo}
	</update>
	
	<!-- 폴더삭제 후 나머지 폴더순서 새로 정렬 -->
	<update id="updateFolderOrder">
		UPDATE FOLDER SET
		FOLDER_ORDER = #{folderNewOrder}
		WHERE MEMBER_NO = #{memberNo}
		AND FOLDER_ORDER = #{folderNewOrder} + 1
		AND BOARD_TYPE_NO = #{boardTypeNo}
	</update>
	
	


	
	<!-- 전체 폴더 순서, 이름 변경 -->
	<update id="updateFolder">
		UPDATE FOLDER SET
		FOLDER_ORDER = #{folderOrder},
		FOLDER_NAME = #{folderName}
		WHERE MEMBER_NO = #{memberNo}
		AND FOLDER_NO = #{folderNo}
	</update>
	
	
	
	<!-- 해당 파일의 폴더목록 조회(DIARY) -->
	<select id="selectDiaryFileList" resultMap="file_rm">
		SELECT DIARY_NO FILE_NO, D_TITLE FILE_TITLE, D_OPEN_FL OPEN_FL, 
		FOLDER_NO, FOLDER_NAME, 1 CATEGORY_NO
		FROM DIARY
		JOIN FOLDER USING(FOLDER_NO)
		WHERE FOLDER_NO = #{folderNo}
		AND D_DEL_YN = 'N'
		AND FOLDER_DEL_YN = 'N'
	</select>
	
	<!-- 해당 파일의 폴더목록 조회(ALBUM) -->
	<select id="selectAlbumFileList" resultMap="file_rm">
		SELECT ALBUM_NO FILE_NO, A_TITLE FILE_TITLE, A_OPEN_FL OPEN_FL, 
		FOLDER_NO, FOLDER_NAME, 2 CATEGORY_NO
		FROM ALBUM 
		JOIN FOLDER USING(FOLDER_NO)
		WHERE FOLDER_NO = #{folderNo}
		AND A_DEL_FL = 'N'
		AND FOLDER_DEL_YN = 'N'
	</select>
	
	
	<!-- 해당 파일의 폴더목록 조회(VIDEO) -->
	<select id="selectVideoFileList" resultMap="file_rm">
		SELECT VIDEO_NO FILE_NO, V_TITLE FILE_TITLE, V_OPEN_FL OPEN_FL, 
		FOLDER_NO, FOLDER_NAME, 3 CATEGORY_NO
		FROM VIDEO
		JOIN FOLDER USING(FOLDER_NO)
		WHERE FOLDER_NO = #{folderNo}
		AND V_DEL_YN = 'N'
		AND FOLDER_DEL_YN = 'N'
	</select>
	
	<!-- (다이어리)내 폴더의 파일 한개 삭제하기 -->
	<update id="deleteDiaryFile">
		UPDATE DIARY SET
		D_DEL_YN = 'Y'
		WHERE DIARY_NO = #{fileNo}
		AND MEMBER_NO = #{memberNo}
	</update>
	
	<!-- (앨범)내 폴더의 파일 한개 삭제하기 -->
	<update id="deleteAlbumFile">
		UPDATE ALBUM SET
		A_DEL_FL = 'Y'
		WHERE ALBUM_NO = #{fileNo}
		AND MEMBER_NO = #{memberNo}
	</update>
	
	<!-- (비디오)내 폴더의 파일 한개 삭제하기 -->
	<update id="deleteVideoFile">
		UPDATE VIDEO SET
		V_DEL_YN = 'Y'
		WHERE VIDEO_NO = #{fileNo}
		AND MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 게시글 공개여부 설정(다이어리) -->
	<update id="updateDiaryOpenFlag">
		UPDATE DIARY SET D_OPEN_FL = #{openFlag}
		WHERE MEMBER_NO = #{memberNo}
		AND DIARY_NO = #{fileNo}
	</update>
	
	<!-- 게시글 공개여부 설정(앨범) -->
	<update id="updateAlbumOpenFlag">
		UPDATE ALBUM SET
		A_OPEN_FL = #{openFlag}
		WHERE MEMBER_NO = #{memberNo}
		AND ALBUM_NO = #{fileNo}
	</update>
	
	<!-- 게시글 공개여부 설정(비디오) -->
	<update id="updateVideoOpenFlag">
		UPDATE VIDEO SET
		V_OPEN_FL = #{openFlag}
		WHERE MEMBER_NO = #{memberNo}
		AND VIDEO_NO = #{fileNo}
	</update>
	
 <!-- 깐부 ====================================================-->

	<!-- 깐부목록 조회 -->
	<select id="getFriendList" resultMap="friend_rm">
		SELECT FRIEND_NO, MEMBER_NICKNAME , PROFILE_IMG FROM
			(SELECT ASKED_MEMBER_NO FRIEND_NO, MEMBER_NICKNAME, PROFILE_IMG
			FROM friend 
			JOIN MEMBER ON(ASKED_MEMBER_NO = MEMBER_NO)
			WHERE ASKING_MEMBER_NO = #{memberNo} AND FRIEND_ACCEPT_FL = 1 AND MEMBER_NICKNAME LIKE '%${searchInput}%')
		UNION
			(SELECT ASKING_MEMBER_NO FRIEND_NO, MEMBER_NICKNAME , PROFILE_IMG
			FROM friend 
			JOIN MEMBER ON(ASKING_MEMBER_NO = MEMBER_NO)
			WHERE ASKED_MEMBER_NO = #{memberNo} AND FRIEND_ACCEPT_FL = 1 AND MEMBER_NICKNAME LIKE '%${searchInput}%')
		ORDER BY MEMBER_NICKNAME
	</select>
	
 	 <!-- 깐부끊기 -->
 	 <delete id="deleteFriend">
 	 	DELETE FROM FRIEND WHERE (ASKED_MEMBER_NO = #{friendNo} AND ASKING_MEMBER_NO = #{memberNo})
		OR (ASKING_MEMBER_NO = #{friendNo} AND ASKED_MEMBER_NO = #{memberNo})
 	 </delete>
 	
 	
 	
 	
  <!-- 폰트 ====================================================-->
 
 	<!-- 상점에 등록된 전체 폰트 리스트 조회 -->
 	<select id="getAllFontList" resultMap="font_rm">
 		SELECT * FROM FONT_SHOP ORDER BY FONT_NO
 	</select>
 
 
 
 	<!-- 내 폰트 목록 조회 -->
 	<select id="getFontList" resultMap="font_rm">
 		SELECT MEMBER_NO, FONT_NO, FONT_NAME, FONT_PATH, FONT_CREATER 
		FROM MEMBER_OWN_GOODS 
		JOIN FONT_SHOP  ON(GOODS_NO = FONT_NO)
		WHERE MEMBER_NO = #{memberNo}
		AND FONT_NAME LIKE '%${searchInput}%'
		AND SHOP_CATH_NO = 1
 	</select>
 	
 	
 	<!-- 새 폰트 적용하기 -->
 	<update id="useFont">
 		UPDATE MEMBER SET OWN_FONT_NO = #{fontNo}
 		WHERE MEMBER_NO = #{memberNo}
 	</update>
 	
 	
 	<!-- 한 회원의 폰트 가져오기 -->
 	<select id="getMemberFontNo" resultType="_int">
 		SELECT OWN_FONT_NO FROM MEMBER 
 		WHERE MEMBER_NO = #{memberNo}
 	</select>
 	
 	
   <!-- 배경색/이미지 ====================================================-->
 	
 	<!-- 배경색/이미지 초기화/변경하기 -->
 	<update id="updateBGColor">
 		UPDATE MINI_HOMEPAGE SET
		BACKGROUND_SKIN = #{backgroundSkin}
		WHERE MEMBER_NO = #{memberNo}
 	</update>
  
 	<!-- 프레임 초기화하기 -->
 	<update id="updateFrameColor">
 		UPDATE MINI_HOMEPAGE SET
		FRAME_COLOR = #{frameColor}
		WHERE MEMBER_NO = #{memberNo}
 	</update>
 	
 	<!-- 프레임 메뉴 색 초기화하기 -->
 	<update id="updateFrameMenuColor">
 		UPDATE MINI_HOMEPAGE SET
		FRAME_MENU_COLOR =#{frameMenuColor},
		FRAME_FONT_COLOR = #{frameFontColor}
		WHERE MEMBER_NO = #{memberNo}
 	</update>
 	
 	
 	 <!-- 배경음악 ====================================================-->
 	
 	<!-- 내 배경음악 목록 조회 -->
 	<select id="getMusicList" resultMap="music_rm">
	 	SELECT MEMBER_NO, MUSIC_NO, MUSIC_NAME, MUSIC_PATH, MUSIC_THUMNAIL ,MUSIC_CREATER 
		FROM MEMBER_OWN_GOODS 
		JOIN MUSIC_SHOP  ON(GOODS_NO = MUSIC_NO)
		WHERE MEMBER_NO = #{memberNo}
		AND MUSIC_NAME LIKE '%${searchInput}%'
		AND SHOP_CATH_NO = 2
 	</select>
 	
 	 <!-- 내 배경음악 설정하기 -->
 	<update id="useMusic">
 		UPDATE MINI_HOMEPAGE SET
		OWN_MUSIC_NO = #{musicNo}
		WHERE MEMBER_NO = #{memberNo}
 	</update>
 	
 	<!-- 상점에 등록된 전체 배경음악 리스트 조회 -->
 	<select id="getAllMusicList" resultMap="music_rm">
 		SELECT * FROM MUSIC_SHOP ms ORDER BY MUSIC_NO
 	</select>
 	
 	 <!-- 내 배경음악 없애기 -->
 	<update id="deleteMusic">
 		UPDATE MINI_HOMEPAGE SET
		OWN_MUSIC_NO = 0
		WHERE MEMBER_NO = #{memberNo}
 	</update>
 	
  
</mapper>
